1. Доработать верстку.
2. Создать отдельную страницу для более полной информации.
3. Доработать поиск: сделать автозаполнение с подсказками при вводе названия, сделать вывод всех результатов со схожим названием.
4. Рефакторинг кода.
5. Добавить еще один источник API для вывода доп информации.
6. Оформить нормально вывод данных.

Тех часть:

1. Разобраться с передачей параметров в дочерние компоненты из родительских.
2. Разобраться с роутингом.

Задачи на завтра:

1. Разобраться с перебором объектов и массивов.
2. Сделать рефакторинг кода для текущего вывода данных:
    1) Вынести получение данных в отдельную функцию;
    2) Обобщить полученные данных - сделать перебор по ключам и объектам, чтобы можно было в одной функции все получать и задавать состояния (как в UserInfo).

Данные для вывода:

Basic info:

city:country - объект
city:timezone - объект
city:urban_area - объект, содержит ссылку на ресурс с фото
population
name

self (для дальнейшего запроса полной инфы) - ссылка на id города

1. Полное название города
2. Страна
3. Население
4. Временная зона
5. Район
6. Ближайшие города
7. Климат (с сайта о погоде)
8. Уровень жизни
9. Фото (с Телепорта для результатов поиска и шапки на странице, с Гугла для слайдера)
10. Геоданные
______________________________________________________________________________________

Задачи на пн и дальше:

1. Разобраться с объектами и классами (еще раз), а также с промисами и самим SuperAgent.
2. Прочитать все доки по API и разобраться со связями {rel} между объектами, может это поможет сократить код и сделать обобщенный способ получения данных с одной ссылки вместо десятка.
3. Сделать рефакторинг, обобщив получение и вывод данных.
4. Вынести в отдельный класс.

Задачи на сегодня (9.09):

1. Добавить роутинг, чтобы по ссылке переходить на страницу с подробной инфой.
2. Оформить страницу с выводом полной информации о городе.
3. Вывести всю оставшуюся интересную инфу с API, которую можно вывести.
4. Добавить вывод погоды и всего интересного, что есть на сайте с погодой.
5. Разобраться с добавлением фото от Гугл.
6. Сделать вывод всех найденных городов при поиске.
7. Разобраться с выводом свойств в дочерних компонентах у дочернего компонента.

Задачи на завтра (10.09):

1. Вынести в отдельный класс получение данных.
2.



**Название:**

**Краткое описание:** Простенькое приложение для поиска информации о городах.

**Цель приложения:** Вывод подробной информации о любом городе с использованием открытых API.

**Основные задачи:**

1. Сделать страницу поиска и вывода результатов с краткой информацией по найденным городам.
2. Сделать страницу с подробной информацией по выбранному городу.

**Цели проекта:** Научиться получать и выводить информацию, полученную по API и работать с ней.

**Подробное описание**:
Для поиска, получения и вывода краткой и подробной информации по городу берем за основу Teleport API.
В краткой информации по городу, которая будет выводится в результатах поиска, выводим название города, фото города, страну и регион.
Далее на странице с подробной информации по городу выводим временную зону, численность населения, геоданные.
Также с помощью другой открытой API (Weather API) выводим подробные данные о текущей погоде в данном городе и т.д.


На завтра:

По аналогии с UserInfo переписать state сделав одним объектом cityInfo с массивом значений в виде данных полученных с API (по сути отдельные стейты сделать одним объектом),
затем вынести в отдельную функцию верстку отдельного элемента из ResultItem с аргументами и перебрать через Object.keys полученный объекте по ключу и значению в виде аргументов из той функции.

**Новое**

Задачи:

1. Получить и вывести на страницу данные сначала через обычные get запросы.
2. Переписать вывод с использованием superagent.
3. Пройти по всем внутренним ссылкам в объектах и получить все необходимые данные с них, чтобы разобраться как работает данная API в плане запросов и получения того, что мы с нее хотим, заодно разобраться, что вообще адекватного можно из нее получить.
4. Сделать рефакторинг всего полученного.
5. Добавить роутинг и добавить ссылки на страницу с подробной информацией по каждому городу.
6. Разобраться с React-Context, сложить все данные туда.
7. Переписать компонент с результатом.
8. Добавить еще одну API с погодой, сделать вывод всего для нее.